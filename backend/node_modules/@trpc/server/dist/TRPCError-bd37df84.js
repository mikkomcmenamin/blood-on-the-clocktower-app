'use strict';

function getMessageFromUnknownError(err, fallback) {
    if (typeof err === 'string') {
        return err;
    }
    if (err instanceof Error && typeof err.message === 'string') {
        return err.message;
    }
    return fallback;
}
function getErrorFromUnknown(cause) {
    if (cause instanceof Error) {
        return cause;
    }
    const message = getMessageFromUnknownError(cause, 'Unknown error');
    return new Error(message);
}
function getTRPCErrorFromUnknown(cause) {
    const error = getErrorFromUnknown(cause);
    // this should ideally be an `instanceof TRPCError` but for some reason that isn't working
    // ref https://github.com/trpc/trpc/issues/331
    if (error.name === 'TRPCError') {
        return cause;
    }
    const trpcError = new TRPCError({
        code: 'INTERNAL_SERVER_ERROR',
        cause: error,
        message: error.message
    });
    // Inherit stack from error
    trpcError.stack = error.stack;
    return trpcError;
}
function getCauseFromUnknown(cause) {
    if (cause instanceof Error) {
        return cause;
    }
    return undefined;
}

class TRPCError extends Error {
    constructor(opts){
        const code = opts.code;
        const message = opts.message ?? getMessageFromUnknownError(opts.cause, code);
        const cause = opts.cause !== undefined ? getErrorFromUnknown(opts.cause) : undefined;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore https://github.com/tc39/proposal-error-cause
        super(message, {
            cause
        });
        this.code = code;
        this.cause = cause;
        this.name = 'TRPCError';
        Object.setPrototypeOf(this, new.target.prototype);
    }
}

exports.TRPCError = TRPCError;
exports.getCauseFromUnknown = getCauseFromUnknown;
exports.getTRPCErrorFromUnknown = getTRPCErrorFromUnknown;
