import { r as resolveHTTPResponse } from './resolveHTTPResponse-a3869d43.mjs';
import { T as TRPCError } from './TRPCError-7de0a793.mjs';

async function getPostBody(opts) {
    const { req , maxBodySize =Infinity  } = opts;
    return new Promise((resolve)=>{
        if ('body' in req) {
            resolve({
                ok: true,
                data: req.body
            });
            return;
        }
        let body = '';
        let hasBody = false;
        req.on('data', function(data) {
            body += data;
            hasBody = true;
            if (body.length > maxBodySize) {
                resolve({
                    ok: false,
                    error: new TRPCError({
                        code: 'PAYLOAD_TOO_LARGE'
                    })
                });
                req.socket.destroy();
            }
        });
        req.on('end', ()=>{
            resolve({
                ok: true,
                data: hasBody ? body : undefined
            });
        });
    });
}

async function nodeHTTPRequestHandler(opts) {
    const createContext = async function _createContext() {
        return await opts.createContext?.(opts);
    };
    const { path , router  } = opts;
    const bodyResult = await getPostBody(opts);
    const query = opts.req.query ? new URLSearchParams(opts.req.query) : new URLSearchParams(opts.req.url.split('?')[1]);
    const req = {
        method: opts.req.method,
        headers: opts.req.headers,
        query,
        body: bodyResult.ok ? bodyResult.data : undefined
    };
    const result = await resolveHTTPResponse({
        batching: opts.batching,
        responseMeta: opts.responseMeta,
        path,
        createContext,
        router,
        req,
        error: bodyResult.ok ? null : bodyResult.error,
        onError (o) {
            opts?.onError?.({
                ...o,
                req: opts.req
            });
        }
    });
    const { res  } = opts;
    if ('status' in result && (!res.statusCode || res.statusCode === 200)) {
        res.statusCode = result.status;
    }
    for (const [key, value] of Object.entries(result.headers ?? {})){
        if (typeof value === 'undefined') {
            continue;
        }
        res.setHeader(key, value);
    }
    res.end(result.body);
}

export { nodeHTTPRequestHandler as n };
